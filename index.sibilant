(var plugin-info
     {description: "read kindle highlights"
      kindle_url: "https://read.amazon.com/notebook"
      default_output_filepath: "highlights.yml"})

;; read kindle highlights
(def get-highlights-for-current-book (callback)
     (var exec-string "
function getTitleAsinMapping() {
  var bookDivs = document.querySelectorAll(\"div#library div.a-row.kp-notebook-library-each-book\");
  var mapping = {};
  for(var i=0;i<bookDivs.length;++i) {
    var asin = bookDivs[i].getAttribute(\"id\");
    var title = bookDivs[i].querySelector(\"h2\").innerText;
    mapping[title] = asin;
  }
  return mapping;
}

function getBookTitle() {
  return document.querySelector(\"div#annotations h3.a-spacing-top-small.a-color-base.kp-notebook-selectable.kp-notebook-metadata\").innerText;
}

function getAllHighlightDivs() {
  return document.querySelectorAll(\"div#kp-notebook-annotations div.a-row.a-spacing-base\");
}

function parseHighlightDiv(div) {
  var highlightColorPageNumber = div.querySelector(\"span.a-size-small.a-color-secondary.kp-notebook-selectable\").innerText;
  var hcpnSplit = highlightColorPageNumber.split(/\\s+/)
  return {
    highlightText: div.querySelector(\"span.a-size-base-plus.a-color-base\").innerText,
    noteText: div.querySelector(\"span#note.a-size-base-plus.a-color-base\").innerText,
    highlightColor: hcpnSplit[0],
    pageNumber: parseInt(hcpnSplit[4].replace(\",\", \"\"))
  }
}

function getBookHighlightData() {
  var highlightDivs = getAllHighlightDivs();
  var highlights = [];
  for(var i=0; i<highlightDivs.length; ++i) {
    highlights.push(parseHighlightDiv(highlightDivs[i]));
  }
  var title = getBookTitle();
  var titleAsinMapping = getTitleAsinMapping();
  return {
    title: title,
    asin: titleAsinMapping[title],
    highlights: highlights
  }
}

getBookHighlightData()
")
     (|> (getWebview)
         (execJs exec-string callback)))

(def save-yaml-to-file! (data output-filepath)
     (fs.writeFile
      output-filepath
      (jsyaml.safeDump data)
      (#(err)
        (when err
              (console.error "FAIL" err)))))

(def start-plugin! (control-element view-element)
     (var output-filepath (m-prop (get plugin-info
                                       "default_output_filepath"))
          status-text (m-prop "")
          current-data (m-prop null))

     (m.mount
      control-element
      {view: (#> (m-miccup
                  ["div"
                   {style: {display: "flex"
                            height: "100%"
                            flexDirection: "column"
                            fontSize: "8pt"
                            fontFamily: "Consolas, Inconsolata, Monaco, Ubuntu, Monospace"
                            }}
                   ["span" "save to file:"]
                   ["input"
                    {type: "text"
                     style: {width: "100%"}
                     value: (output-filepath)
                     onchange: (#(evt)
                                 (output-filepath (get evt 'target 'value)))}]
                   ["div"
                    ["button"
                     {onclick: (#> (get-highlights-for-current-book
                                    (#(js-out)
                                      (current-data js-out)
                                      (var asin (get js-out "asin"))
                                      (output-filepath
                                       (+ asin ".yml"))
                                      (status-text
                                       (+ "loaded "
                                          (get js-out "highlights" "length")
                                          " highlights from "
                                          (get js-out "title")
                                          " (" asin ")"))
                                      (m.redraw))))}
                     "load highlights"]
                    ["button"
                     {onclick: (#>
                                (console.debug "save to file:" (output-filepath))
                                (var filepath (output-filepath)
                                     cur-data (current-data))
                                (when (= filepath.length 0)
                                      (assign filepath
                                              (get plugin-info
                                                   "default_output_filepath")))
                                (var show-message!
                                     (#(data)
                                       (status-text
                                        (+ "saved "
                                           (get data "highlights" "length")
                                           " highlights to "
                                           (output-filepath)))
                                       (m.redraw))
                                     
                                     do-save!
                                     (if (not cur-data)
                                         (#> (get-highlights-for-current-book
                                              (#(data)
                                                (save-yaml-to-file!
                                                 data filepath)
                                                (show-message! data))))
                                         (#> (save-yaml-to-file!
                                              cur-data filepath)
                                             (show-message! cur-data))))
                                (do-save!))}
                     "save notes file"]]
                   ["textarea"
                    {style: {width: "100%"
                             boxSizing: "border-box"
                             flex: 1}}
                    (when (current-data)
                          (|> (current-data)
                              (JSON.stringify null 2)))]
                   ["div"
                    {style: {color: "brown"}}
                    (status-text)]]))})
     
     (m.mount
      view-element
      {oncreate: (#(vnode)
                   (var dom-node (get vnode "dom"))
                   ;; important -- needed for JS interaction
                   (dom-node.addEventListener
                    "did-finish-load"
                    (#> (Hyperbloviate.bindWebviewInterop dom-node))))
       view: (#> (m-miccup ["webview"
                            {src: (get plugin-info "kindle_url")
                             allowRunningInsecureContent: true
                             preload: "webview_preload.js"}]))}))

(set exports
     'info plugin-info
     'start start-plugin!)
